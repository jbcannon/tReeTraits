library(tidyverse)
library(ggplot2)
source('analysis/helper_fxns.R')
#install.packages('recexcavAAR') #rotation of point clouds
#devtools::install_github("lmterryn/ITSMe", build_vignettes = TRUE)

input_las_dir = 'data/seg-trees'
output_trait_dir = 'data/trait-output/'
output_qsm_dir = 'R:/landscape_ecology/projects/canopy-traits/qsm-output/' #full path
df = readxl::read_excel('data/seg-trees/tree-seg-datasheet.xlsx')

# Summarize progress
done = df %>% group_by(analyst) %>% 
  filter(!is.na(analyst) & complete == 'Y') %>%
  mutate(time_mn = as.numeric(time)*24/60)
a = done %>% ggplot(aes(x=dbh, y=ba, color=species)) + 
  geom_point() + theme_bw() +
  theme(legend.position='none') +
  facet_wrap(~species)
b = done %>% ggplot(aes(x=dbh, fill=species)) + 
  geom_histogram() + theme_bw() +
  theme(legend.position='none') +
  facet_wrap(~species)
c = done %>% ggplot(aes(x=ba, fill=species)) + geom_histogram() +
  theme_bw() +  facet_wrap(~species) +
  theme(legend.position='none') 

ggpubr::ggarrange(a,b,c, nrow=3)

done %>% group_by(species) %>% summarize(n = length(dbh))

# RUN QSM for all trees
all_las = list.files(path = input_las_dir, pattern='.las|.laz',
                 recursive = TRUE, full.names=TRUE)
# remove winch trees and fdp plots
all_las = grep('winch|fdp2023', all_las, invert=TRUE, value = TRUE)

#replace all .las with .laz
fns = all_las 
fns = grep('.las$', fns, value=TRUE)

# not in parallel bc crashes R
for(fn in fns){
  laz_fn = gsub('.las$', '.laz', fn)
  las = lidR::readLAS(fn)
  lidR::writeLAS(las, laz_fn)
  if(file.exists(laz_fn)) unlink(fn)
}

#which trees are ready:
df = dplyr::filter(df, complete %in% c('Y', 'YES', 'yes', 'y'))
df = dplyr::mutate(df, fn = paste0('data/seg-trees/', site, '/tree_', sprintf('%04d', ID), '.laz'))
all_las = all_las[all_las %in% df$fn]

# identify trees with no QSM
need_qsms = c()
for(fn in all_las) {
  name = gsub('.laz|.laz', '', gsub('-', '_', paste0(basename(dirname(fn)), '-', basename(fn))), ignore.case=TRUE)
  qsm_out_fn = paste0(basename(output_qsm_dir), '/', name, '_qsm.mat')
  if(!file.exists(qsm_out_fn)) {need_qsms = append(need_qsms, fn)}
}
# number of QSMs remaining
cat(length(need_qsms), ' QSMs need modeling\n')
cat(length(all_las) - length(need_qsms), ' QSMs complete\n')

skips = c() 

for(fn in need_qsms) {
  dir = paste0(output_qsm_dir, '/results/')
  if(!dir.exists(dir)) dir.create(dir)
  cat('Attempting QSM', which(need_qsms == fn), 'of', length(need_qsms), '\n')
  if(fn %in% skips) next
  name = gsub('.laz|.laz', '', gsub('-', '_', paste0(basename(dirname(fn)), '-', basename(fn))), ignore.case=TRUE)
  qsm_out_fn = paste0('../qsm-output/', name, '_qsm.mat')
  if(file.exists(qsm_out_fn)) {message('skipping ', name,'\n'); next}
  beepr::beep(10) #denote start
  print(Sys.time())
  out_file = qsm_only_fun(fn, n_cores = 2, int.threshold=41000)
  beepr::beep(2) #denote end
  Sys.sleep(3)
}
update_qsm_jpgs('R:\\\\landscape_ecology\\\\projects\\\\canopy-traits\\\\qsm-output\\\\test_plotting.m')


## Analyze QSM qaulity

qsm_dir = c('qsm-output/')
fns = list.files(qsm_dir, 'qsm_cylFits.csv', full.names = TRUE)
qsm_outputs = lapply(fns, function(fn) {
  base_fn = gsub('_qsm_cylFits.csv', '', fn)
  xml_fn = paste0(base_fn, '_qsm_optInputs.xml')
  qsm_optinputs = get_qsm_inputs_from_xml(xml_fn)
  qsm_fit = read.csv(fn, header=FALSE)[1,1]
  name = basename(base_fn)
  out = tibble(    
    ID = name,
    QSM_ERR = qsm_fit,
    PD1 = qsm_optinputs$value[1],
    PD2min = qsm_optinputs$value[2],
    PD2max = qsm_optinputs$value[3],
    lcyl = qsm_optinputs$value[4],
    FilRad = qsm_optinputs$value[5],
    BallRad1 = qsm_optinputs$value[6],
    BallRad2 = qsm_optinputs$value[7])
  return(out)  
})
qsm_outputs = do.call(rbind, qsm_outputs)

for(c in 2:9) qsm_outputs[,c] = as.numeric(unlist(qsm_outputs[,c]))

qsm_outputs$SPP = NA
qsm_outputs$SPP = ifelse(grepl('pdens',qsm_outputs$ID), 'PINDEN', qsm_outputs$SPP)
qsm_outputs$SPP = ifelse(grepl('ecofor',qsm_outputs$ID), 'PINPAL', qsm_outputs$SPP)
qsm_outputs$SPP = ifelse(grepl('slash',qsm_outputs$ID), 'PINELL', qsm_outputs$SPP)
qsm_outputs$SPP = ifelse(grepl('pioneer',qsm_outputs$ID), 'PINECH', qsm_outputs$SPP)

qsm_outputs %>% pivot_longer(QSM_ERR:BallRad2) %>%
  ggplot(aes(x=value, fill=SPP)) + geom_histogram() + facet_wrap(~name, scales = 'free')

qsm_outputs %>% pivot_longer(PD1:BallRad2) %>% 
  ggplot(aes(y=QSM_ERR, x = value, color=SPP)) + geom_point() +
  facet_wrap(~name, scales='free') +
  geom_smooth(method = 'lm') + theme_bw()

qsm_par_mod = lm(QSM_ERR ~ BallRad1 + BallRad2 + lcyl + PD2min, data = qsm_outputs)
summary(qsm_par_mod)
ggplot(qsm_outputs, aes(x=SPP, y=QSM_ERR, fill=SPP)) + geom_boxplot()

